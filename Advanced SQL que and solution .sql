
-- ** ADVANCED SQL QUESTION ** --

use moviesdb ;
-- moviesdb contains 5 table
select * from movies;
select * from financials;
select * from movie_actor;
select * from actors;
select * from languages;

-- QUESTIONS:
/* Q.1. Identify the top 3 studios which have the highest average Return on Investment (ROI) 
	for their movies. Only consider studios with more than 1 movies. */

with converted as (select *,
					case 
						when unit="Billions" then (budget*1000)
						when unit="Thousands" then (budget/1000)
						when unit="Millions" then budget
					end budget_million ,
					case 
						when unit="Billions" then (revenue*1000)
						when unit="Thousands" then (revenue/1000)
						when unit="Millions" then revenue
					end revenue_million
				from financials ),
movie_roi as (select m.studio as studio ,round((revenue_million-budget_million)/budget_million , 2) as ROI
				from movies m
				join converted c
				on m.movie_id = c.movie_id
                where studio != "") 
                
select studio, 
count(studio) number_of_movies,
round(avg(ROI),2) as average_roi
from movie_roi
group by studio
having count(studio)>1
order by number_of_movies desc
limit 3 ;


/* Q.2. : Find total number of movies of an actor and the number of movies in each industry.
	(e.g., Bollywood and Hollywood), also Show the actor's name. (consider total movie >= 2)  */
	
with actor_table as ( select name as actor_name,industry,
						count(title) as movie_count
						from movies m
						join (movie_actor as ma, actors as a)
						on m.movie_id = ma.movie_id and ma.actor_id = a.actor_id
						group by name ,industry )

select actor_name, 
sum(case when industry = "Bollywood" then movie_count else 0 end) as bolly_movies,
sum(case when industry = "Hollywood" then movie_count else 0 end)as holly_movies,
sum(movie_count) as Total_Movies 
from actor_table
group by actor_name
having Total_Movies > 1
order by Total_Movies desc;


/* Q.3.  Categorize movies into four buckets based on their budget ('Low', 'Medium', 'High', 'Very High') 
	 Then, for each bucket, calculate the average ROI. Does spending more money guarantee a better return? */

with converted as (select *,
					case 
						when unit="Billions" then (budget*1000)
						when unit="Thousands" then (budget/1000)
						when unit="Millions" then budget
					end budget_million ,
					case 
						when unit="Billions" then (revenue*1000)
						when unit="Thousands" then (revenue/1000)
						when unit="Millions" then revenue
					end revenue_million
				from financials 
				where budget > 0),
	join_table as (select m.title as movie,c.budget_million,c.revenue_million,
                    round((c.revenue_million-c.budget_million)/c.budget_million , 2) as ROI,
                    ntile(4) over(order by c.budget_million ) as budget_bucket
					from movies m
					join converted c
					on m.movie_id = c.movie_id
                    where m.studio!= "" and m.studio is not null)
select 
case when budget_bucket = 1 then "Low"
	 when budget_bucket = 2 then "Medium"
     when budget_bucket = 3 then "High" 
     when budget_bucket = 4 then "Very High"
end as budget_category,
count(movie) No_of_movies,
round(avg(ROI),2) avg_roi
from join_table
group by budget_bucket;


-- Q.4.	For each language, show the movie with the highest IMDb rating using a window function

with imdb_table as (select m.title as movie_title,
						   m.imdb_rating,
						   l.name as language_name,
					row_number()
                    over(partition by l.name order by m.imdb_rating desc) ranking
					from movies m
					join languages l
					on m.language_id = l.language_id) 
                    
select language_name,movie_title,imdb_rating
from imdb_table
where ranking = 1;


/* Q.5. For each year and each industry, show the following:
	* The highest grossing movie of the year.
	* The total revenue generated by the industry that year.
	* The industry's revenue as a percentage of the total revenue for that year across all industries. */

with converted as (select *,
					case when unit="Billions" then (budget*1000)
						 when unit="Thousands" then (budget/1000)
						 when unit="Millions" then budget
					end budget_million ,
					case when unit="Billions" then (revenue*1000)
						 when unit="Thousands" then (revenue/1000)
						 when unit="Millions" then revenue
					end revenue_million
				from financials ),
	join_table as (select m.title , m.industry,m.release_year,c.budget_million,c.revenue_million
					from movies m
					join converted c
					on m.movie_id = c.movie_id),
	rankings as (select industry,release_year,title,revenue_million,
				sum(revenue_million) over(partition by industry,release_year) as industry_year_total,
				sum(revenue_million) over(partition by release_year) as total_revenue,
				row_number() over(partition by industry,release_year order by revenue_million desc ) ranking
				from join_table)
select 
industry,
release_year,
title as highest_grossing_movie,
round(revenue_million,2) as movie_revenue,
round(industry_year_total,2) as industry_year_total,
round(total_revenue,2) as year_total_revenue,
round((industry_year_total/total_revenue)*100) as revenue_percentage
from rankings
where ranking = 1
order by release_year desc, industry ;


